/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Soubhik
 */
public class ForgotPasswordResetPwDialog extends javax.swing.JDialog {

    UserLoginPanel parentPanel;
    String username;
    /**
     * Creates new form ForgotPasswordResetPwDialog
     */
    public ForgotPasswordResetPwDialog(java.awt.Frame parent, boolean modal, String username, UserLoginPanel parentPanel) {
        super(parent, modal);
        initComponents();
        this.username = username;
        this.parentPanel = parentPanel;
        setLocationRelativeTo(parent);
        setTitle("Reset password");
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        resetPasswordLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        showNewPasswordButton = new javax.swing.JToggleButton();
        newPasswordField = new javax.swing.JPasswordField();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordField = new javax.swing.JPasswordField();
        showConfirmPasswordButton = new javax.swing.JToggleButton();
        cancelButton = new javax.swing.JButton();
        proceedButton = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                cancelResetPassword();
            }
        });

        resetPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        resetPasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resetPasswordLabel.setText("Reset Password");

        newPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newPasswordLabel.setText("New Password");

        showNewPasswordButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(ForgotPasswordResetPwDialog.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        showNewPasswordButton.setToolTipText("Show/Hide password");
        showNewPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showNewPasswordButtonActionPerformed(evt);
            }
        });

        newPasswordField.setToolTipText("The password must contain the following:\n-> length between 8-32 characters\n-> at least 1 capital letter\n-> at least 1 small letter\n-> at least 1 number\n-> at least 1 special character");
        newPasswordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                newPasswordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                newPasswordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                newPasswordFieldActionPerformed();
            }
        });

        confirmPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password");

        confirmPasswordField.setToolTipText("Password must be same as above");
        confirmPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPasswordFieldActionPerformed();
            }
        });
        confirmPasswordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                confirmPasswordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                confirmPasswordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                confirmPasswordFieldActionPerformed();
            }
        });

        showConfirmPasswordButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(ForgotPasswordResetPwDialog.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        showConfirmPasswordButton.setToolTipText("Show/Hide password");
        showConfirmPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showConfirmPasswordButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        proceedButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        proceedButton.setText("Proceed");
        proceedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(proceedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(resetPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(confirmPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(newPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(confirmPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                                        .addComponent(newPasswordField))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(showNewPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(showConfirmPasswordButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(resetPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showNewPasswordButton)
                                        .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(confirmPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showConfirmPasswordButton))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelButton)
                                        .addComponent(proceedButton))
                                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void confirmPasswordFieldActionPerformed() {
        // TODO add your handling code here:
        confirmPasswordField.setBackground((new JPasswordField()).getBackground());
    }

    private void showConfirmPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(showConfirmPasswordButton.isSelected())
        {
            confirmPasswordField.setEchoChar((char)0);
        }
        else
        {
            confirmPasswordField.setEchoChar('•');
        }
    }

    private void newPasswordFieldActionPerformed() {
        // TODO add your handling code here:
        newPasswordField.setBackground((new JPasswordField()).getBackground());
    }

    private void showNewPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(showNewPasswordButton.isSelected())
        {
            newPasswordField.setEchoChar((char)0);
        }
        else
        {
            newPasswordField.setEchoChar('•');
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        cancelResetPassword();
    }

    private void cancelResetPassword()
    {
        if(!cancelButton.isEnabled())
        {
            return;
        }
        SwingWorker<Void, Void> cancelNotifier = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                parentPanel.stopForgotPasswordButtonAnimation();
                return null;
            }
        };
        cancelNotifier.execute();
        dispose();
    }

    private void proceedButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        startProceedButtonAnimation();
        newPasswordField.setBackground((new JPasswordField()).getBackground());
        confirmPasswordField.setBackground((new JPasswordField()).getBackground());

        SwingWorker<Void, Void> passwordReseter = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                String errorMessages = "";
                String password = new String(newPasswordField.getPassword());
                if(password.length() < 8 || password.length() > 32)
                {
                    errorMessages = errorMessages + "\nThe password length must be within 8-32 characters.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                Pattern capitalLetters = Pattern.compile("[A-Z]");
                Pattern smallLetters = Pattern.compile("[a-z]");
                Pattern numbers = Pattern.compile("[0-9]");
                Pattern specialCharacters = Pattern.compile("[!@#$%&*()_+=|<>?{}\\[\\]~-]");
                Matcher hasCapitalLetter = capitalLetters.matcher(password);
                Matcher hasSmallLetter = smallLetters.matcher(password);
                Matcher hasNumber = numbers.matcher(password);
                Matcher hasSpecialCharacter = specialCharacters.matcher(password);
                if(!hasCapitalLetter.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 capital letter.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasSmallLetter.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 small letter.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasNumber.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 number.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasSpecialCharacter.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 special character.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }

                if(!Arrays.equals(confirmPasswordField.getPassword(), newPasswordField.getPassword()))
                {
                    errorMessages = errorMessages + "\nThe confirm password field must match the password field.";
                    confirmPasswordField.setBackground(new Color(255, 94, 116, 131));
                }

                if(!errorMessages.isEmpty())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "Please correct the following errors in the form to proceed -" + errorMessages,
                            "Invalid input", JOptionPane.ERROR_MESSAGE);
                    stopProceedButtonAnimation();
                    return null;
                }

                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopProceedButtonAnimation();
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    stopProceedButtonAnimation();
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean resetSuccess = NetworkManager.resetPassword(username, password);
                NetworkManager.setBusy(false);
                if(resetSuccess == null)
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopProceedButtonAnimation();
                    return null;
                }
                if(!resetSuccess)
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server faced an internal error.\nPlease try again later.",
                            "Server error", JOptionPane.ERROR_MESSAGE);
                    stopProceedButtonAnimation();
                    return null;
                }

                JOptionPane.showMessageDialog(getSelfReference(), "Your password has been successfully reset.\nPlease login with the new password.",
                        "Reset successful", JOptionPane.INFORMATION_MESSAGE);
                parentPanel.stopForgotPasswordButtonAnimation();
                dispose();
                return null;
            }
        };
        passwordReseter.execute();
    }

    private ForgotPasswordResetPwDialog getSelfReference()
    {
        return this;
    }

    private void startProceedButtonAnimation()
    {
        ImageIcon proceedButtonIcon = new ImageIcon(Objects.requireNonNull(ForgotPasswordResetPwDialog.class.getClassLoader().getResource("Spinner-1s-20px (1).gif")));
        proceedButton.setIcon(proceedButtonIcon);
        proceedButtonIcon.setImageObserver(proceedButton);
        proceedButton.setEnabled(false);
        newPasswordField.setFocusable(false);
        confirmPasswordField.setFocusable(false);
        showNewPasswordButton.setEnabled(false);
        showConfirmPasswordButton.setEnabled(false);
        cancelButton.setEnabled(false);
        repaint();
        revalidate();
    }

    private void stopProceedButtonAnimation()
    {
        proceedButton.setIcon(null);
        proceedButton.setEnabled(true);
        newPasswordField.setFocusable(true);
        confirmPasswordField.setFocusable(true);
        showNewPasswordButton.setEnabled(true);
        showConfirmPasswordButton.setEnabled(true);
        cancelButton.setEnabled(true);
        repaint();
        revalidate();
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ForgotPasswordResetPwDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ForgotPasswordResetPwDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ForgotPasswordResetPwDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ForgotPasswordResetPwDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                ForgotPasswordResetPwDialog dialog = new ForgotPasswordResetPwDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify
    private javax.swing.JButton cancelButton;
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JButton proceedButton;
    private javax.swing.JLabel resetPasswordLabel;
    private javax.swing.JToggleButton showConfirmPasswordButton;
    private javax.swing.JToggleButton showNewPasswordButton;
    // End of variables declaration
}
