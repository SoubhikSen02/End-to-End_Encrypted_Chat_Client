/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Objects;

/**
 *
 * @author Soubhik
 */
public class AccountSettingsPanel extends javax.swing.JPanel {

    SettingsWindowDialog parentDialog;

    /**
     * Creates new form AccountSettingsPanel
     */
    public AccountSettingsPanel(SettingsWindowDialog parent) {
        initComponents();
        parentDialog = parent;
        if(accountIdField.getText().equals("0000000000000000"))
        {
            displayNameChangeButton.setEnabled(false);
            passwordChangeButton.setEnabled(false);
            savedUsersManageButton.setEnabled(false);
            allowNewPersonalChatCheckBox.setEnabled(false);
            allowNewGroupChatCheckBox.setEnabled(false);
        }
    }

    ActionListener personalChatAllowListener;
    ActionListener groupChatAllowListener;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        allowNewPersonalChatCheckBox = new javax.swing.JCheckBox();
        allowNewGroupChatCheckBox = new javax.swing.JCheckBox();
        accountIdLabel = new javax.swing.JLabel();
        accountIdField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        displayNameLabel = new javax.swing.JLabel();
        displayNameField = new javax.swing.JTextField();
        displayNameChangeButton = new javax.swing.JButton();
        passwordLabel = new javax.swing.JLabel();
        passwordChangeButton = new javax.swing.JButton();
        savedUsersLabel = new javax.swing.JLabel();
        savedUsersManageButton = new javax.swing.JButton();
        accountIdCopyButton = new javax.swing.JButton();

        allowNewPersonalChatCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        if(ConfigManager.getAllowNewPersonalChat().equals("true"))
            allowNewPersonalChatCheckBox.setSelected(true);
        else if(ConfigManager.getAllowNewPersonalChat().equals("false") || ConfigManager.getAllowNewPersonalChat().equals("unknown"))
            allowNewPersonalChatCheckBox.setSelected(false);
        allowNewPersonalChatCheckBox.setText("Allow other users to start a new personal chat with you");
        allowNewPersonalChatCheckBox.setToolTipText("Only controls NEW INCOMING personal chat requests");
        personalChatAllowListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                allowNewPersonalChatCheckBox.removeActionListener(personalChatAllowListener);
                allowNewPersonalChatCheckBoxActionPerformed(e);
            }
        };
        allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);

        allowNewGroupChatCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        if(ConfigManager.getAllowNewGroupChat().equals("true"))
            allowNewGroupChatCheckBox.setSelected(true);
        else if(ConfigManager.getAllowNewGroupChat().equals("false") || ConfigManager.getAllowNewGroupChat().equals("unknown"))
            allowNewGroupChatCheckBox.setSelected(false);
        allowNewGroupChatCheckBox.setText("Allow other users to include or add you to a group chat");
        allowNewGroupChatCheckBox.setToolTipText("Only controls NEW INCOMING group chat requests");
        groupChatAllowListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                allowNewGroupChatCheckBox.removeActionListener(groupChatAllowListener);
                allowNewGroupChatCheckBoxActionPerformed(e);
            }
        };
        allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);

        accountIdLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        accountIdLabel.setText("Account ID");
        accountIdLabel.setToolTipText("Uniquely assigned 16-digit account ID");

        accountIdField.setEditable(false);
        accountIdField.setText(ConfigManager.getAccountID());
        accountIdField.setToolTipText("Uniquely assigned 16-digit account ID");
        accountIdField.setFocusable(false);
        accountIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountIdFieldActionPerformed(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        usernameLabel.setText("Username");
        usernameLabel.setToolTipText("Unique username of account");

        usernameField.setEditable(false);
        usernameField.setText(ConfigManager.getAccountUsername());
        usernameField.setToolTipText("Unique username of account");
        usernameField.setFocusable(false);
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        displayNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        displayNameLabel.setText("Display Name");
        displayNameLabel.setToolTipText("Name visible to other users");

        displayNameField.setEditable(false);
        displayNameField.setText(ConfigManager.getAccountDisplayName());
        displayNameField.setToolTipText("Name visible to other users");
        displayNameField.setFocusable(false);
        displayNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayNameFieldActionPerformed(evt);
            }
        });

        displayNameChangeButton.setText("Change");
        displayNameChangeButton.setToolTipText("Modify display name");
        displayNameChangeButton.setFocusPainted(false);
        displayNameChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayNameChangeButtonActionPerformed(evt);
            }
        });

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passwordLabel.setText("Password");
        passwordLabel.setToolTipText("Account password");

        passwordChangeButton.setText("Change");
        passwordChangeButton.setToolTipText("Modify password");
        passwordChangeButton.setFocusPainted(false);
        passwordChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordChangeButtonActionPerformed(evt);
            }
        });

        savedUsersLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        savedUsersLabel.setText("Saved users");
        savedUsersLabel.setToolTipText("Previously saved user contacts");

        savedUsersManageButton.setText("Manage");
        savedUsersManageButton.setToolTipText("Add or delete previously saved user contacts");
        savedUsersManageButton.setFocusPainted(false);
        savedUsersManageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedUsersManageButtonActionPerformed(evt);
            }
        });

        accountIdCopyButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(AccountSettingsPanel.class.getClassLoader().getResource("copy.png")))); // NOI18N
        accountIdCopyButton.setToolTipText("Copy Account ID");
        accountIdCopyButton.setActionCommand("");
        accountIdCopyButton.setFocusPainted(false);
        accountIdCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountIdCopyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(allowNewGroupChatCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(allowNewPersonalChatCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(accountIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(displayNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(savedUsersLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                                        .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(usernameField)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(displayNameField)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(displayNameChangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(passwordChangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(savedUsersManageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(accountIdField)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(accountIdCopyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(accountIdLabel)
                                        .addComponent(accountIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(accountIdCopyButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(usernameLabel)
                                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(displayNameLabel)
                                        .addComponent(displayNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayNameChangeButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(passwordLabel)
                                        .addComponent(passwordChangeButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(savedUsersLabel)
                                        .addComponent(savedUsersManageButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(allowNewPersonalChatCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(allowNewGroupChatCheckBox)
                                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void accountIdFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void displayNameFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //  Add document listeners above and do required actions here
        //  only if display name change is done in the panel itself and not in a separate dialog
    }

    private void displayNameChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //  Add functionality for changing display name after clicking this button
        //  such as opening new dialog or modifying current panel if not too complicated
        //  Also needs to be updated to server, so network should be active
        //  Better to update directly without any need for save button below
        SwingWorker<Void, Void> changeDisplayNameDialogCreator = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                if(!NetworkManager.isLoggedIn())
                {
                    JOptionPane.showMessageDialog(parentDialog, "User is currently not logged in with the server.\nPlease try again a little later.",
                            "User not logged in", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    return null;
                }

                ChangeDisplayNameDialog changeDisplayNameDialog = new ChangeDisplayNameDialog(parentDialog, true, getSelfReference());

                return null;
            }
        };
        changeDisplayNameDialogCreator.execute();
    }

    private AccountSettingsPanel getSelfReference()
    {
        return this;
    }

    private void passwordChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //  Add functionality for opening new dialog containing required fields for changing password
        //  such as old password, new password, confirm new password, etc
        //  Also needs to be updated to server, so network should be active
        //  Better to update directly without any need for save button below
        SwingWorker<Void, Void> changePasswordDialogCreator = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                if(!NetworkManager.isLoggedIn())
                {
                    JOptionPane.showMessageDialog(parentDialog, "User is currently not logged in with the server.\nPlease try again a little later.",
                            "User not logged in", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    return null;
                }

                ChangePasswordDialog changePasswordDialog = new ChangePasswordDialog(parentDialog, true);

                return null;
            }
        };
        changePasswordDialogCreator.execute();
    }

    private void savedUsersManageButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //  Add functionality for opening new dialog containing list of saved users
        //  and options to add or delete users in the list
        //  May need to be updated to server, so network should probably be active
        //  Better to update directly without any need for save button below
        SwingWorker<Void, Void> savedUsersWindowCreator = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                ManageSavedUsersDialog savedUsersDialog = new ManageSavedUsersDialog(parentDialog, true);
                return null;
            }
        };
        savedUsersWindowCreator.execute();
    }

    private void allowNewPersonalChatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //  Add functionality for updating change to server, network needs to be active
        //  Better to do directly and not involve save button
        SwingWorker<Void, Void> settingsUpdator = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                boolean currentSelectionState = allowNewPersonalChatCheckBox.isSelected();
                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    allowNewPersonalChatCheckBox.setSelected(!currentSelectionState);
                    allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);
                    return null;
                }
                if(!NetworkManager.isLoggedIn())
                {
                    JOptionPane.showMessageDialog(parentDialog, "User is currently not logged in with the server.\nPlease try again a little later.",
                            "User not logged in", JOptionPane.ERROR_MESSAGE);
                    allowNewPersonalChatCheckBox.setSelected(!currentSelectionState);
                    allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    allowNewPersonalChatCheckBox.setSelected(!currentSelectionState);
                    allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean success = NetworkManager.updateAllowNewPersonalChat(currentSelectionState);
                NetworkManager.setBusy(false);
                if(success == null)
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    allowNewPersonalChatCheckBox.setSelected(!currentSelectionState);
                    allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);
                    return null;
                }
                else if(!success)
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server faced an internal error.\nPlease try again later.",
                            "Server error", JOptionPane.ERROR_MESSAGE);
                    allowNewPersonalChatCheckBox.setSelected(!currentSelectionState);
                    allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);
                    return null;
                }

                JOptionPane.showMessageDialog(parentDialog, "Others can" + (currentSelectionState? "" : "not") + " create personal chats with you now.",
                        "Setting updated", JOptionPane.INFORMATION_MESSAGE);
                allowNewPersonalChatCheckBox.setSelected(currentSelectionState);
                allowNewPersonalChatCheckBox.addActionListener(personalChatAllowListener);

                return null;
            }
        };
        settingsUpdator.execute();
    }

    private void allowNewGroupChatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //  Add functionality for updating change to server, network needs to be active
        //  Better to do directly and not involve save button
        SwingWorker<Void, Void> settingsUpdator = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                boolean currentSelectionState = allowNewGroupChatCheckBox.isSelected();
                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    allowNewGroupChatCheckBox.setSelected(!currentSelectionState);
                    allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);
                    return null;
                }
                if(!NetworkManager.isLoggedIn())
                {
                    JOptionPane.showMessageDialog(parentDialog, "User is currently not logged in with the server.\nPlease try again a little later.",
                            "User not logged in", JOptionPane.ERROR_MESSAGE);
                    allowNewGroupChatCheckBox.setSelected(!currentSelectionState);
                    allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    allowNewGroupChatCheckBox.setSelected(!currentSelectionState);
                    allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean success = NetworkManager.updateAllowNewGroupChat(currentSelectionState);
                NetworkManager.setBusy(false);
                if(success == null)
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    allowNewGroupChatCheckBox.setSelected(!currentSelectionState);
                    allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);
                    return null;
                }
                else if(!success)
                {
                    JOptionPane.showMessageDialog(parentDialog, "The server faced an internal error.\nPlease try again later.",
                            "Server error", JOptionPane.ERROR_MESSAGE);
                    allowNewGroupChatCheckBox.setSelected(!currentSelectionState);
                    allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);
                    return null;
                }

                JOptionPane.showMessageDialog(parentDialog, "Others can" + (currentSelectionState? "" : "not") + " create group chats with you now.",
                        "Setting updated", JOptionPane.INFORMATION_MESSAGE);
                allowNewGroupChatCheckBox.setSelected(currentSelectionState);
                allowNewGroupChatCheckBox.addActionListener(groupChatAllowListener);

                return null;
            }
        };
        settingsUpdator.execute();
    }

    private void accountIdCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(accountIdField.getText()), null);
        if(copyButtonPopup != null)
            remove(copyButtonPopup);

        copyButtonPopup = new JPopupMenu();
        JMenuItem copyItem = new JMenuItem("Copied");
        copyItem.setEnabled(false);
        //copyItem.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        copyButtonPopup.add(copyItem);

        add(copyButtonPopup);
        copyButtonPopup.show(this, accountIdCopyButton.getX() + accountIdCopyButton.getWidth(), accountIdCopyButton.getY());
    }


    // Variables declaration - do not modify
    private javax.swing.JButton accountIdCopyButton;
    private javax.swing.JTextField accountIdField;
    private javax.swing.JLabel accountIdLabel;
    private javax.swing.JCheckBox allowNewGroupChatCheckBox;
    private javax.swing.JCheckBox allowNewPersonalChatCheckBox;
    private javax.swing.JButton displayNameChangeButton;
    private javax.swing.JTextField displayNameField;
    private javax.swing.JLabel displayNameLabel;
    private javax.swing.JButton passwordChangeButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel savedUsersLabel;
    private javax.swing.JButton savedUsersManageButton;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    private JPopupMenu copyButtonPopup = null;
    // End of variables declaration

    public JTextField getAccountIdField()
    {
        return accountIdField;
    }

    public JTextField getUsernameField()
    {
        return usernameField;
    }

    public JTextField getDisplayNameField()
    {
        return displayNameField;
    }

    public JCheckBox getAllowNewPersonalChatCheckBox()
    {
        return allowNewPersonalChatCheckBox;
    }

    public JCheckBox getAllowNewGroupChatCheckBox()
    {
        return allowNewGroupChatCheckBox;
    }
}
