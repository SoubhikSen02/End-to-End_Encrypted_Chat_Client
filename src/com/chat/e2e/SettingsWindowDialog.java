/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 *
 * @author Soubhik
 */
public class SettingsWindowDialog extends javax.swing.JDialog {

    /**
     * Creates new form settingsWindowDialog
     */
    public SettingsWindowDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);

        mainSettingsButtonGroup.add(aboutSettingsButton);
        mainSettingsButtonGroup.add(accountSettingsButton);
        mainSettingsButtonGroup.add(advancedSettingsButton);
        mainSettingsButtonGroup.add(generalSettingsButton);
        mainSettingsButtonGroup.add(storageSettingsButton);
        mainSettingsButtonGroup.add(themeSettingsButton);

        aboutSettingsButton.setSelected(true);
        settingsDisplayScrollPanel.setViewportView(new AboutSettingsPanel(this));

        settingsResetButton.setEnabled(false);
        settingsSaveButton.setEnabled(false);

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mainSettingsButtonGroup = new javax.swing.ButtonGroup();
        mainSettingsGroupPanel = new javax.swing.JPanel();
        generalSettingsButton = new javax.swing.JToggleButton();
        themeSettingsButton = new javax.swing.JToggleButton();
        accountSettingsButton = new javax.swing.JToggleButton();
        advancedSettingsButton = new javax.swing.JToggleButton();
        storageSettingsButton = new javax.swing.JToggleButton();
        aboutSettingsButton = new javax.swing.JToggleButton();
        settingsDisplayPanel = new javax.swing.JPanel();
        settingsDisplayScrollPanel = new javax.swing.JScrollPane();
        settingsControlButtonsPanel = new javax.swing.JPanel();
        settingsSaveButton = new javax.swing.JButton();
        settingsCancelButton = new javax.swing.JButton();
        settingsResetButton = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Settings");

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                settingsWindowClosing();
            }
        });

        mainSettingsGroupPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        generalSettingsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        generalSettingsButton.setText("General");
        generalSettingsButton.setFocusPainted(false);
        generalSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generalSettingsButtonActionPerformed(evt);
            }
        });

        themeSettingsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        themeSettingsButton.setText("Theme");
        themeSettingsButton.setFocusPainted(false);
        themeSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeSettingsButtonActionPerformed(evt);
            }
        });

        accountSettingsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        accountSettingsButton.setText("Account");
        accountSettingsButton.setToolTipText("");
        accountSettingsButton.setFocusPainted(false);
        accountSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountSettingsButtonActionPerformed(evt);
            }
        });

        advancedSettingsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        advancedSettingsButton.setText("Advanced");
        advancedSettingsButton.setFocusPainted(false);
        advancedSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedSettingsButtonActionPerformed(evt);
            }
        });

        storageSettingsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        storageSettingsButton.setText("Storage");
        storageSettingsButton.setFocusPainted(false);
        storageSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storageSettingsButtonActionPerformed(evt);
            }
        });

        aboutSettingsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        aboutSettingsButton.setText("About");
        aboutSettingsButton.setFocusPainted(false);
        aboutSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutSettingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainSettingsGroupPanelLayout = new javax.swing.GroupLayout(mainSettingsGroupPanel);
        mainSettingsGroupPanel.setLayout(mainSettingsGroupPanelLayout);
        mainSettingsGroupPanelLayout.setHorizontalGroup(
                mainSettingsGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(generalSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(themeSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(accountSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(advancedSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(storageSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(aboutSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        mainSettingsGroupPanelLayout.setVerticalGroup(
                mainSettingsGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainSettingsGroupPanelLayout.createSequentialGroup()
                                .addComponent(aboutSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(accountSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(advancedSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generalSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(storageSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(themeSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 184, Short.MAX_VALUE))
        );

        settingsDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout settingsDisplayPanelLayout = new javax.swing.GroupLayout(settingsDisplayPanel);
        settingsDisplayPanel.setLayout(settingsDisplayPanelLayout);
        settingsDisplayPanelLayout.setHorizontalGroup(
                settingsDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(settingsDisplayScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        settingsDisplayPanelLayout.setVerticalGroup(
                settingsDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(settingsDisplayScrollPanel)
        );

        settingsControlButtonsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        settingsSaveButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        settingsSaveButton.setText("Save");
        settingsSaveButton.setFocusPainted(false);
        settingsSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsSaveButtonActionPerformed(evt);
            }
        });

        settingsCancelButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        settingsCancelButton.setText("Cancel");
        settingsCancelButton.setFocusPainted(false);
        settingsCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsCancelButtonActionPerformed(evt);
            }
        });

        settingsResetButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        settingsResetButton.setText("Reset");
        settingsResetButton.setFocusPainted(false);
        settingsResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsControlButtonsPanelLayout = new javax.swing.GroupLayout(settingsControlButtonsPanel);
        settingsControlButtonsPanel.setLayout(settingsControlButtonsPanelLayout);
        settingsControlButtonsPanelLayout.setHorizontalGroup(
                settingsControlButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(settingsControlButtonsPanelLayout.createSequentialGroup()
                                .addContainerGap(399, Short.MAX_VALUE)
                                .addComponent(settingsResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(settingsCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(settingsSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        settingsControlButtonsPanelLayout.setVerticalGroup(
                settingsControlButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(settingsControlButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(settingsSaveButton)
                                .addComponent(settingsCancelButton)
                                .addComponent(settingsResetButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(mainSettingsGroupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(settingsDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(settingsControlButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(settingsDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(mainSettingsGroupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(settingsControlButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>

    private void settingsWindowClosing()
    {
        if(settingsSaveButton.isEnabled() && settingsResetButton.isEnabled())
        {
            int response = JOptionPane.showConfirmDialog(this, "Changes made to some settings have not been saved.\n" +
                    "Do you want to discard the changes?", "Discard changes?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(response == JOptionPane.YES_OPTION)
            {
                dispose();
            }
            return;
        }
        dispose();
    }

    private void settingsCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        settingsWindowClosing();
    }

    private void settingsResetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(advancedSettingsButton.isSelected())
        {
            AdvancedSettingsPanel advancedPanelReference = (AdvancedSettingsPanel)(settingsDisplayScrollPanel.getViewport().getComponent(0));
            advancedPanelReference.getServerIpField().setText(ConfigManager.getServerIpAddress());
            advancedPanelReference.getServerPortField().setText(ConfigManager.getServerPortAddress());
            if(ConfigManager.getClientPortAddressType().equals("Dynamic"))
            {
                advancedPanelReference.getClientPortDynamicButton().setSelected(true);
                advancedPanelReference.getClientPortCustomField().setEnabled(false);
                advancedPanelReference.getClientPortCustomField().setFocusable(false);
            }
            else if(ConfigManager.getClientPortAddressType().equals("Custom"))
            {
                advancedPanelReference.getClientPortCustomButton().setSelected(true);
                advancedPanelReference.getClientPortCustomField().setEnabled(true);
                advancedPanelReference.getClientPortCustomField().setFocusable(true);
            }
            advancedPanelReference.getClientPortCustomField().setText(ConfigManager.getClientPortAddress());
            advancedPanelReference.getProbeTimeSpinnerField().setValue(Integer.valueOf(ConfigManager.getConnectionProbeTimePeriod()));
        }
        else if(generalSettingsButton.isSelected())
        {
            GeneralSettingsPanel generalPanelReference = (GeneralSettingsPanel)(settingsDisplayScrollPanel.getViewport().getComponent(0));
            generalPanelReference.getInitialNumberOfMessagesSpinnerField().setValue(Integer.valueOf(ConfigManager.getInitialNumberOfMessagesToLoad()));
        }
        settingsSaveButton.setEnabled(false);
        settingsResetButton.setEnabled(false);
    }

    private void settingsSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(advancedSettingsButton.isSelected())
        {
            AdvancedSettingsPanel advancedPanelReference = (AdvancedSettingsPanel)(settingsDisplayScrollPanel.getViewport().getComponent(0));
            ConfigManager.setServerIpAddress(advancedPanelReference.getServerIpField().getText());
            ConfigManager.setServerPortAddress(advancedPanelReference.getServerPortField().getText());
            if(advancedPanelReference.getClientPortDynamicButton().isSelected())
            {
                ConfigManager.setClientPortAddressType("Dynamic");
            }
            else if(advancedPanelReference.getClientPortCustomButton().isSelected())
            {
                ConfigManager.setClientPortAddressType("Custom");
            }
            ConfigManager.setClientPortAddress(advancedPanelReference.getClientPortCustomField().getText());
            ConfigManager.setConnectionProbeTimePeriod(((Integer)advancedPanelReference.getProbeTimeSpinnerField().getValue()).toString());
        }
        else if(generalSettingsButton.isSelected())
        {
            GeneralSettingsPanel generalPanelReference = (GeneralSettingsPanel)(settingsDisplayScrollPanel.getViewport().getComponent(0));
            ConfigManager.setInitialNumberOfMessagesToLoad(((Integer)generalPanelReference.getInitialNumberOfMessagesSpinnerField().getValue()).toString());
        }
        settingsSaveButton.setEnabled(false);
        settingsResetButton.setEnabled(false);
    }

    private void generalSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        boolean changeApproved = checkAndShowDiscardChangesWarning();
        if(changeApproved)
            settingsDisplayScrollPanel.setViewportView(new GeneralSettingsPanel(this));
    }

    private void themeSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        boolean changeApproved = checkAndShowDiscardChangesWarning();
        if(changeApproved)
            settingsDisplayScrollPanel.setViewportView(new ThemeSettingsPanel(this));
    }

    private void accountSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        boolean changeApproved = checkAndShowDiscardChangesWarning();
        if(changeApproved)
            settingsDisplayScrollPanel.setViewportView(new AccountSettingsPanel(getSelfReference()));
    }

    private void advancedSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        boolean changeApproved = checkAndShowDiscardChangesWarning();
        if(changeApproved)
            settingsDisplayScrollPanel.setViewportView(new AdvancedSettingsPanel(this));
    }

    private void storageSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        boolean changeApproved = checkAndShowDiscardChangesWarning();
        if(changeApproved)
            settingsDisplayScrollPanel.setViewportView(new StorageSettingsPanel(this));
    }

    private void aboutSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        boolean changeApproved = checkAndShowDiscardChangesWarning();
        if(changeApproved)
            settingsDisplayScrollPanel.setViewportView(new AboutSettingsPanel(this));
    }

    public void enableSaveAndResetButtons()
    {
        settingsSaveButton.setEnabled(true);
        settingsResetButton.setEnabled(true);
    }

    private boolean checkAndShowDiscardChangesWarning()
    {
        if(settingsSaveButton.isEnabled() && settingsResetButton.isEnabled())
        {
            int response = JOptionPane.showConfirmDialog(this, "Changes made to some settings have not been saved.\n" +
                    "Do you want to discard the changes?", "Discard changes?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(response == JOptionPane.YES_OPTION)
            {
                settingsSaveButton.setEnabled(false);
                settingsResetButton.setEnabled(false);
                return true;
            }
            else
            {
                String previousSelectedButtonPanelClassName = ((JPanel)(settingsDisplayScrollPanel.getViewport().getComponent(0))).getClass().getSimpleName().toLowerCase();
                if(previousSelectedButtonPanelClassName.contains("advanced"))
                    advancedSettingsButton.setSelected(true);
                else if(previousSelectedButtonPanelClassName.contains("about"))
                    aboutSettingsButton.setSelected(true);
                else if(previousSelectedButtonPanelClassName.contains("account"))
                    accountSettingsButton.setSelected(true);
                else if(previousSelectedButtonPanelClassName.contains("general"))
                    generalSettingsButton.setSelected(true);
                else if(previousSelectedButtonPanelClassName.contains("storage"))
                    storageSettingsButton.setSelected(true);
                else if(previousSelectedButtonPanelClassName.contains("theme"))
                    themeSettingsButton.setSelected(true);
                return false;
            }
            //return false;
        }
        else
            return true;
    }

    private SettingsWindowDialog getSelfReference()
    {
        return this;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsWindowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsWindowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsWindowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsWindowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SettingsWindowDialog dialog = new SettingsWindowDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JToggleButton aboutSettingsButton;
    private javax.swing.JToggleButton accountSettingsButton;
    private javax.swing.JToggleButton advancedSettingsButton;
    private javax.swing.JToggleButton generalSettingsButton;
    private javax.swing.ButtonGroup mainSettingsButtonGroup;
    private javax.swing.JPanel mainSettingsGroupPanel;
    private javax.swing.JButton settingsCancelButton;
    private javax.swing.JPanel settingsControlButtonsPanel;
    private javax.swing.JPanel settingsDisplayPanel;
    private javax.swing.JScrollPane settingsDisplayScrollPanel;
    private javax.swing.JButton settingsResetButton;
    private javax.swing.JButton settingsSaveButton;
    private javax.swing.JToggleButton storageSettingsButton;
    private javax.swing.JToggleButton themeSettingsButton;
    // End of variables declaration
}
