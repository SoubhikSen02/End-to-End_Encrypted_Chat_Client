/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.Objects;

/**
 *
 * @author Soubhik
 */

public class UserLoginPanel extends javax.swing.JPanel {


    /**
     * Creates new form UserLoginPanel
     */
    public UserLoginPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        loginLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        showPasswordButton = new javax.swing.JToggleButton();
        stayLoggedInCheckbox = new javax.swing.JCheckBox();
        forgotPasswordButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        loginLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        loginLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginLabel.setText("Login Existing User");
        loginLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        usernameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        usernameLabel.setText("Username");

        usernameField.setToolTipText("Unique account username");
        usernameField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                usernameFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                usernameFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                usernameFieldActionPerformed();
            }
        });

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passwordLabel.setText("Password");

        passwordField.setToolTipText("Account password");
        passwordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                passwordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                passwordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                passwordFieldActionPerformed();
            }
        });


        showPasswordButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(UserLoginPanel.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        showPasswordButton.setToolTipText("Show/Hide password");
        showPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordButtonActionPerformed(evt);
            }
        });

        stayLoggedInCheckbox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        stayLoggedInCheckbox.setText("Stay logged in");
        stayLoggedInCheckbox.setToolTipText("If option is -\nUnchecked -> User will be logged out when app is closed and will have to log in again next time\nChecked -> User will not be logged out after app is closed and will automatically log in next time");
        stayLoggedInCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stayLoggedInCheckboxActionPerformed(evt);
            }
        });

        forgotPasswordButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        forgotPasswordButton.setText("Forgot password?");
        forgotPasswordButton.setToolTipText("Recover account by answering security questions");
        forgotPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotPasswordButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        loginButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(stayLoggedInCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(215, 215, 215)
                                                .addComponent(forgotPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(passwordField)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(showPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(usernameField))))
                                .addGap(73, 73, 73))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(240, 240, 240)
                                .addComponent(loginLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                .addGap(249, 249, 249))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(stayLoggedInCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(forgotPasswordButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(115, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void usernameFieldActionPerformed() {
        // TODO add your handling code here:
        usernameField.setBackground((new JTextField()).getBackground());
    }

    private void passwordFieldActionPerformed() {
        // TODO add your handling code here:
        passwordField.setBackground((new JPasswordField()).getBackground());
    }

    private void stayLoggedInCheckboxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void showPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(showPasswordButton.isSelected())
        {
            passwordField.setEchoChar((char)0);
        }
        else
        {
            passwordField.setEchoChar('•');
        }
    }

    private void forgotPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        startForgotPasswordButtonAnimation();
        usernameField.setBackground((new JTextField()).getBackground());
        passwordField.setBackground((new JPasswordField()).getBackground());

        SwingWorker<Void, Void> forgotPasswordDialogInitializer = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                if(usernameField.getText().isEmpty())
                {
                    usernameField.setBackground(new Color(255, 94, 116, 131));
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "Please enter the username to reset password of.",
                            "Invalid input", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }

                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean usernameNotExists = NetworkManager.checkUsernameAvailability(usernameField.getText());
                if(usernameNotExists == null)
                {
                    NetworkManager.setBusy(false);
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }
                if(usernameNotExists)
                {
                    NetworkManager.setBusy(false);
                    usernameField.setBackground(new Color(255, 94, 116, 131));
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The given username does not exist.\nPlease check and try again.",
                            "Invalid username", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }

                String[] securityQuestions = NetworkManager.retrieveSecurityQuestions(usernameField.getText());
                NetworkManager.setBusy(false);
                if(securityQuestions == null)
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }
                if(securityQuestions.length == 0)
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server faced an internal error.\nPlease try again later.",
                            "Server error", JOptionPane.ERROR_MESSAGE);
                    stopForgotPasswordButtonAnimation();
                    return null;
                }

                ForgotPasswordSecurityQsDialog securityQsDialog = new ForgotPasswordSecurityQsDialog(Main.getMainFrame(), true, getSelfReference(), securityQuestions, usernameField.getText());
                return null;
            }
        };
        forgotPasswordDialogInitializer.execute();
    }

    private JPanel getSelfReference()
    {
        return this;
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        WindowManager.changeFromLoginToSelection();
    }

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        startLoginButtonAnimation();
        usernameField.setBackground((new JTextField()).getBackground());
        passwordField.setBackground((new JPasswordField()).getBackground());

        SwingWorker<Void, Void> loginWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                String errorMessages = "";
                if(usernameField.getText().isEmpty())
                {
                    errorMessages = errorMessages + "\nUsername cannot be empty.";
                    usernameField.setBackground(new Color(255, 94, 116, 131));
                }
                if(passwordField.getPassword().length == 0)
                {
                    errorMessages = errorMessages + "\nPassword cannot be empty.";
                    passwordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!errorMessages.isEmpty())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "Please correct the following errors in the login form -" + errorMessages,
                            "Invalid input", JOptionPane.ERROR_MESSAGE);
                    stopLoginButtonAnimation();
                    return null;
                }

                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopLoginButtonAnimation();
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    stopLoginButtonAnimation();
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean loginSuccess = NetworkManager.loginToNewSession( new String(usernameField.getText()),
                        new String(passwordField.getPassword()), stayLoggedInCheckbox.isSelected());
                NetworkManager.setBusy(false);
                if(loginSuccess == null)
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopLoginButtonAnimation();
                    return null;
                }
                if(!loginSuccess)
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The given combination of username and password is incorrect.\nPlease check and try again.",
                            "Invalid input", JOptionPane.ERROR_MESSAGE);
                    stopLoginButtonAnimation();
                    return null;
                }
                WindowManager.changeFromLoginToChat();
                return null;
            }
        };
        loginWorker.execute();
    }

    private void startLoginButtonAnimation()
    {
        ImageIcon loginButtonIcon = new ImageIcon(Objects.requireNonNull(UserLoginPanel.class.getClassLoader().getResource("Spinner-1s-30px (2).gif")));
        loginButton.setIcon(loginButtonIcon);
        loginButtonIcon.setImageObserver(loginButton);
        loginButton.setEnabled(false);
        usernameField.setFocusable(false);
        passwordField.setFocusable(false);
        showPasswordButton.setEnabled(false);
        stayLoggedInCheckbox.setEnabled(false);
        forgotPasswordButton.setEnabled(false);
        cancelButton.setEnabled(false);
        repaint();
        revalidate();
    }

    private void stopLoginButtonAnimation()
    {
        loginButton.setIcon(null);
        loginButton.setEnabled(true);
        usernameField.setFocusable(true);
        passwordField.setFocusable(true);
        showPasswordButton.setEnabled(true);
        stayLoggedInCheckbox.setEnabled(true);
        forgotPasswordButton.setEnabled(true);
        cancelButton.setEnabled(true);
        repaint();
        revalidate();
    }

    private void startForgotPasswordButtonAnimation()
    {
        ImageIcon forgotPasswordButtonIcon = new ImageIcon(Objects.requireNonNull(UserLoginPanel.class.getClassLoader().getResource("Spinner-1s-20px (1).gif")));
        forgotPasswordButton.setIcon(forgotPasswordButtonIcon);
        forgotPasswordButtonIcon.setImageObserver(forgotPasswordButton);
        forgotPasswordButton.setEnabled(false);
        usernameField.setFocusable(false);
        passwordField.setFocusable(false);
        showPasswordButton.setEnabled(false);
        stayLoggedInCheckbox.setEnabled(false);
        loginButton.setEnabled(false);
        cancelButton.setEnabled(false);
        repaint();
        revalidate();
    }

    public void stopForgotPasswordButtonAnimation()
    {
        forgotPasswordButton.setIcon(null);
        forgotPasswordButton.setEnabled(true);
        usernameField.setFocusable(true);
        passwordField.setFocusable(true);
        showPasswordButton.setEnabled(true);
        stayLoggedInCheckbox.setEnabled(true);
        loginButton.setEnabled(true);
        cancelButton.setEnabled(true);
        repaint();
        revalidate();
    }

    public void switchFromSecQsToReset(String username, ForgotPasswordSecurityQsDialog secDialogReference)
    {
        SwingWorker<Void,Void> dialogChanger = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                secDialogReference.dispose();
                ForgotPasswordResetPwDialog resetPwDialog = new ForgotPasswordResetPwDialog(Main.getMainFrame(), true, usernameField.getText(), (UserLoginPanel) getSelfReference());
                return null;
            }
        };
        dialogChanger.execute();
    }


    // Variables declaration - do not modify
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton forgotPasswordButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JToggleButton showPasswordButton;
    private javax.swing.JCheckBox stayLoggedInCheckbox;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration
}
