/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

/**
 *
 * @author Soubhik
 */
public class ChatMessagesListSentDocumentComponent extends javax.swing.JPanel {

    private String messageID;

    /**
     * Creates new form ChatMessagesListSentDocumentComponent
     */
    public ChatMessagesListSentDocumentComponent(String messageID) {
        initComponents();
        this.messageID = messageID;
        documentPanel.setBackground(documentPanel.getBackground().brighter());
        documentDetailsLabel.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        emptySideLabel1 = new javax.swing.JLabel();
        emptySideLabel2 = new javax.swing.JLabel();
        timestampBottomLabel = new javax.swing.JLabel();
        statusIconLabel = new javax.swing.JLabel();
        documentPanel = new javax.swing.JPanel();
        documentNameLabel = new javax.swing.JLabel();
        documentIconLabel = new javax.swing.JLabel();
        documentDetailsLabel = new javax.swing.JLabel();

        timestampBottomLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        timestampBottomLabel.setText("placeholder Timestamp");
        timestampBottomLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timestampBottomLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                timestampBottomLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                timestampBottomLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                timestampBottomLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                timestampBottomLabelMouseReleased(evt);
            }
        });

        statusIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusIconLabel.setText("");
        statusIconLabel.setToolTipText("The icons mean the following:\nwaiting clock -> message yet to sent to server\nsingle red tick -> message sent to server, but not yet delivered to receiver\ndouble red tick -> message sent to server, and delivered to receiver, but not yet seen by receiver\ndouble green tick -> message sent to server, and delivered to receiver, and seen by receiver");
        statusIconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statusIconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statusIconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statusIconLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                statusIconLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                statusIconLabelMouseReleased(evt);
            }
        });

        documentPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        documentPanel.setMinimumSize(new java.awt.Dimension(200, 80));

        documentNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        documentNameLabel.setText("<html>placeholderFileName</html>");
        documentNameLabel.setToolTipText("placeholderFileName");
        documentNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        documentNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        documentNameLabel.setPreferredSize(new java.awt.Dimension(0, 0));
        documentNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                documentNameLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                documentNameLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                documentNameLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                documentNameLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                documentNameLabelMouseReleased(evt);
            }
        });

        documentIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        documentIconLabel.setIcon(new ImageIcon(Objects.requireNonNull(ChatMessagesListSentDocumentComponent.class.getClassLoader().getResource("unknown-file.png")))); // NOI18N

        documentDetailsLabel.setText("");
        documentDetailsLabel.setToolTipText("placeholderFileDetails");
        documentDetailsLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        documentDetailsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        documentDetailsLabel.setPreferredSize(new java.awt.Dimension(0, 0));
        documentDetailsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                documentDetailsLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                documentDetailsLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                documentDetailsLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                documentDetailsLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                documentDetailsLabelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout documentPanelLayout = new javax.swing.GroupLayout(documentPanel);
        documentPanel.setLayout(documentPanelLayout);
        documentPanelLayout.setHorizontalGroup(
                documentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, documentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(documentIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(documentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(documentNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(documentDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        documentPanelLayout.setVerticalGroup(
                documentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(documentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(documentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(documentPanelLayout.createSequentialGroup()
                                                .addComponent(documentNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(documentDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(documentIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(emptySideLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(emptySideLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                                .addGap(63, 63, 63)
                                                .addComponent(documentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(300, 300, 300)
                                                .addComponent(timestampBottomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(statusIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(emptySideLabel1)
                                                        .addComponent(emptySideLabel2)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(documentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(timestampBottomLabel)
                                                        .addComponent(statusIconLabel))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void timestampBottomLabelMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void timestampBottomLabelMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void timestampBottomLabelMouseExited(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void timestampBottomLabelMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void timestampBottomLabelMouseReleased(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void statusIconLabelMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void statusIconLabelMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void statusIconLabelMouseExited(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void statusIconLabelMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void statusIconLabelMouseReleased(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentNameLabelMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentNameLabelMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentNameLabelMouseExited(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentNameLabelMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentNameLabelMouseReleased(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentDetailsLabelMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentDetailsLabelMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentDetailsLabelMouseExited(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentDetailsLabelMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void documentDetailsLabelMouseReleased(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private String processIntoMultipleLines(String originalText)
    {
        // precalculate approximate width of document name based on the following data -
        // ratio of document name width          message scroll list width           document name width           size of window(approx)
        // to message scroll list width
        //           0.26                                      504                           131                         800*600
        //           0.28                                      665                           185
        //           0.29                                      885                           258
        //           0.30                                      1090                          326
        //           0.30                                      1329                          406
        //           0.31                                      1640                          510                 fullscreen-1920xless than 1080
        // max possible difference between window width and scroll list width = 300 (approx safe distance)
        // safe ratio for document name width from scroll list width = 0.26
        // results -
        // actual message scroll list width                  estimated document name width                  size of window(approx)
        //             504                                                130                                      800*600
        //             663                                                171
        //             884                                                228
        //             1093                                               283
        //             1331                                               345
        //             1640                                               425                            fullscreen-1920xless than 1080
        // estimation gets closer to actual width as scroll list width decreases
        int defaultWidthOfNameField = (int)((Main.getMainFrame().getWidth() - 300) * 0.26);//documentDetailsLabel.getWidth();
        //System.out.println(defaultWidthOfNameField);

        FontMetrics fontMetrics = getFontMetrics(getFont().deriveFont(Font.BOLD));
        int textWidth = fontMetrics.stringWidth(originalText);

        if(textWidth <= defaultWidthOfNameField)
        {
            return "<html>" + originalText + "</html>";
        }
        else {
            StringBuilder newText = new StringBuilder("<html>");
            StringBuilder currentLineText = new StringBuilder();
            for (int i = 0; i < originalText.length(); i++) {
                //System.out.println(i);
                currentLineText.append(originalText.charAt(i));
                if (fontMetrics.stringWidth(currentLineText.toString()) > defaultWidthOfNameField) {
                    i--;
                    newText.append("<br>");
                    currentLineText = new StringBuilder();
                }
                else {
                    newText.append(originalText.charAt(i));
                }
            }
            newText.append("</html>");
            return newText.toString();
        }
    }

    public void setDetails(String documentName, String documentSize, String timestamp, String readState)
    {
        documentNameLabel.setText(processIntoMultipleLines(documentName));
        documentNameLabel.setToolTipText(documentName);

        String documentType = "";
        if(documentName.lastIndexOf('.') == -1)
        {
            documentType = "FILE";
        }
        else {
            documentType = documentName.substring(documentName.lastIndexOf('.') + 1);
            documentType = documentType.toUpperCase();
        }

        if(Integer.parseInt(documentSize) == 0)
        {
            documentDetailsLabel.setText(processIntoMultipleLines(documentType));
            documentDetailsLabel.setToolTipText(documentType);
        }
        else {
            double documentSizeInOtherUnit = Double.parseDouble(documentSize);
            int sizeUnit = 0;
            String[] storageUnits = new String[]{"B", "KB", "MB", "GB", "TB", "PB"};
            while (documentSizeInOtherUnit >= 1024 && sizeUnit <= 5) {
                documentSizeInOtherUnit = documentSizeInOtherUnit / 1024;
                sizeUnit++;
            }
            documentDetailsLabel.setText(processIntoMultipleLines(String.format("%.2f", documentSizeInOtherUnit) + " " + storageUnits[sizeUnit] + " • " + documentType));
            documentDetailsLabel.setToolTipText(String.format("%.2f", documentSizeInOtherUnit) + " " + storageUnits[sizeUnit] + " • " + documentType);
        }

        documentIconLabel.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(ChatMessagesListSentDocumentComponent.class.getClassLoader().getResource(IconMapper.getIconFileNameForParticularDocumentType(documentType)))));

        timestampBottomLabel.setText(timestamp);
        formatTimestamp();

        int readStateValue = Integer.parseInt(readState);
        if (readStateValue == 3) {
            statusIconLabel.setIcon(new ImageIcon(Objects.requireNonNull(ChatMessagesListSentDocumentComponent.class.getClassLoader().getResource("double-check.png"))));
        } else if (readStateValue == 2) {
            statusIconLabel.setIcon(new ImageIcon(Objects.requireNonNull(ChatMessagesListSentDocumentComponent.class.getClassLoader().getResource("sent.png"))));
        } else if (readStateValue == 1) {
            statusIconLabel.setIcon(new ImageIcon(Objects.requireNonNull(ChatMessagesListSentDocumentComponent.class.getClassLoader().getResource("check-symbol.png"))));
        } else {
            statusIconLabel.setIcon(new ImageIcon(Objects.requireNonNull(ChatMessagesListSentDocumentComponent.class.getClassLoader().getResource("time-left.png"))));
        }
    }

    private void formatTimestamp()
    {
        LocalDate currentDate = LocalDate.now();
        LocalDate givenDate = (new Timestamp(Long.parseLong(timestampBottomLabel.getText()))).toLocalDateTime().toLocalDate();
        LocalTime givenTime = (new Timestamp(Long.parseLong(timestampBottomLabel.getText()))).toLocalDateTime().toLocalTime();
        if(givenDate.getYear() == currentDate.getYear() && givenDate.getMonthValue() == currentDate.getMonthValue() && givenDate.getDayOfMonth() == currentDate.getDayOfMonth())
        {
            timestampBottomLabel.setText(givenTime.format(DateTimeFormatter.ofPattern("hh:mm a")).toUpperCase());
        }
        else
        {
            timestampBottomLabel.setText(givenTime.format(DateTimeFormatter.ofPattern("hh:mm a")).toUpperCase() + " on " + givenDate.format(DateTimeFormatter.ofPattern("dd/MM/yy")));
        }
        timestampBottomLabel.setToolTipText(givenTime.format(DateTimeFormatter.ofPattern("hh:mm a")).toUpperCase() + " on " + givenDate.format(DateTimeFormatter.ofPattern("dd/MM/yy")));
    }


    // Variables declaration - do not modify
    private javax.swing.JLabel documentDetailsLabel;
    private javax.swing.JLabel documentIconLabel;
    private javax.swing.JLabel documentNameLabel;
    private javax.swing.JPanel documentPanel;
    private javax.swing.JLabel emptySideLabel1;
    private javax.swing.JLabel emptySideLabel2;
    private javax.swing.JLabel statusIconLabel;
    private javax.swing.JLabel timestampBottomLabel;
    // End of variables declaration
}
