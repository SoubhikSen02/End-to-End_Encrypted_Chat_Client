/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Soubhik
 */
public class ChangePasswordDialog extends javax.swing.JDialog {

    /**
     * Creates new form ChangePasswordDialog
     */
    public ChangePasswordDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Change password");
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        changePasswordLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        showNewPasswordButton = new javax.swing.JToggleButton();
        newPasswordField = new javax.swing.JPasswordField();
        confirmNewPasswordLabel = new javax.swing.JLabel();
        confirmNewPasswordField = new javax.swing.JPasswordField();
        showConfirmNewPasswordButton = new javax.swing.JToggleButton();
        cancelButton = new javax.swing.JButton();
        confirmChangeButton = new javax.swing.JButton();
        oldPasswordLabel = new javax.swing.JLabel();
        showOldPasswordButton = new javax.swing.JToggleButton();
        oldPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if(confirmChangeButton.isEnabled())
                {
                    if(oldPasswordField.getPassword().length == 0 && newPasswordField.getPassword().length == 0 && confirmNewPasswordField.getPassword().length == 0)
                    {
                        dispose();
                        return;
                    }
                    else
                    {
                        int response = JOptionPane.showConfirmDialog(getSelfReference(), "Do you want to cancel changing password?", "Cancel changes", JOptionPane.YES_NO_OPTION);
                        if(response == JOptionPane.NO_OPTION)
                        {
                            return;
                        }
                        else if(response == JOptionPane.YES_OPTION)
                        {
                            dispose();
                            return;
                        }
                    }
                }
            }
        });

        changePasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        changePasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        changePasswordLabel.setText("Change Password");

        newPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newPasswordLabel.setText("New Password");

        showNewPasswordButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(ChangePasswordDialog.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        showNewPasswordButton.setToolTipText("Show/Hide password");
        showNewPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showNewPasswordButtonActionPerformed(evt);
            }
        });

        newPasswordField.setToolTipText("The password must contain the following:\n-> length between 8-32 characters\n-> at least 1 capital letter\n-> at least 1 small letter\n-> at least 1 number\n-> at least 1 special character");
        newPasswordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                newPasswordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                newPasswordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                newPasswordFieldActionPerformed();
            }
        });

        confirmNewPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmNewPasswordLabel.setText("Confirm New Password");

        confirmNewPasswordField.setToolTipText("Password must be same as above");
        confirmNewPasswordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                confirmNewPasswordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                confirmNewPasswordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                confirmNewPasswordFieldActionPerformed();
            }
        });


        showConfirmNewPasswordButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(ChangePasswordDialog.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        showConfirmNewPasswordButton.setToolTipText("Show/Hide password");
        showConfirmNewPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showConfirmNewPasswordButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmChangeButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmChangeButton.setText("Confirm and change");
        confirmChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmChangeButtonActionPerformed(evt);
            }
        });

        oldPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        oldPasswordLabel.setText("Old Password");

        showOldPasswordButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(ChangePasswordDialog.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        showOldPasswordButton.setToolTipText("Show/Hide password");
        showOldPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showOldPasswordButtonActionPerformed(evt);
            }
        });

        oldPasswordField.setToolTipText("Previously given password");
        oldPasswordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                oldPasswordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                oldPasswordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                oldPasswordFieldActionPerformed();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(confirmChangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(changePasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(confirmNewPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(newPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(oldPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(oldPasswordField)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(showOldPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(confirmNewPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                                                        .addComponent(newPasswordField))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(showNewPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(showConfirmNewPasswordButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(changePasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oldPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showOldPasswordButton)
                                        .addComponent(oldPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showNewPasswordButton)
                                        .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(confirmNewPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(confirmNewPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showConfirmNewPasswordButton))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelButton)
                                        .addComponent(confirmChangeButton))
                                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void showNewPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(showNewPasswordButton.isSelected())
        {
            newPasswordField.setEchoChar((char)0);
        }
        else
        {
            newPasswordField.setEchoChar('•');
        }
    }

    private void newPasswordFieldActionPerformed() {
        // TODO add your handling code here:
        newPasswordField.setBackground((new JPasswordField()).getBackground());
    }

    private void confirmNewPasswordFieldActionPerformed() {
        // TODO add your handling code here:
        confirmNewPasswordField.setBackground((new JPasswordField()).getBackground());
    }

    private void showConfirmNewPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(showConfirmNewPasswordButton.isSelected())
        {
            confirmNewPasswordField.setEchoChar((char)0);
        }
        else
        {
            confirmNewPasswordField.setEchoChar('•');
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(oldPasswordField.getPassword().length == 0 && newPasswordField.getPassword().length == 0 && confirmNewPasswordField.getPassword().length == 0)
        {
            dispose();
            return;
        }
        else
        {
            int response = JOptionPane.showConfirmDialog(this, "Do you want to cancel changing password?", "Cancel changes", JOptionPane.YES_NO_OPTION);
            if(response == JOptionPane.NO_OPTION)
            {
                return;
            }
            else if(response == JOptionPane.YES_OPTION)
            {
                dispose();
                return;
            }
        }
    }

    private JDialog getSelfReference()
    {
        return this;
    }

    private void confirmChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        startConfirmButtonLoadingAnimation();
        oldPasswordField.setBackground((new JPasswordField()).getBackground());
        newPasswordField.setBackground((new JPasswordField()).getBackground());
        confirmNewPasswordField.setBackground((new JPasswordField()).getBackground());

        SwingWorker<Void, Void> passwordChanger = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                String errorMessages = "";
                String oldPassword = new String(oldPasswordField.getPassword());
                if(oldPassword.isEmpty())
                {
                    errorMessages = errorMessages + "\nThe old password cannot be empty.";
                    oldPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                String newPassword = new String(newPasswordField.getPassword());
                if(newPassword.length() < 8 || newPassword.length() > 32)
                {
                    errorMessages = errorMessages + "\nThe new password length must be within 8-32 characters.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                Pattern capitalLetters = Pattern.compile("[A-Z]");
                Pattern smallLetters = Pattern.compile("[a-z]");
                Pattern numbers = Pattern.compile("[0-9]");
                Pattern specialCharacters = Pattern.compile("[!@#$%&*()_+=|<>?{}\\[\\]~-]");
                Matcher hasCapitalLetter = capitalLetters.matcher(newPassword);
                Matcher hasSmallLetter = smallLetters.matcher(newPassword);
                Matcher hasNumber = numbers.matcher(newPassword);
                Matcher hasSpecialCharacter = specialCharacters.matcher(newPassword);
                if(!hasCapitalLetter.find())
                {
                    errorMessages = errorMessages + "\nThe new password must contain at least 1 capital letter.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasSmallLetter.find())
                {
                    errorMessages = errorMessages + "\nThe new password must contain at least 1 small letter.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasNumber.find())
                {
                    errorMessages = errorMessages + "\nThe new password must contain at least 1 number.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasSpecialCharacter.find())
                {
                    errorMessages = errorMessages + "\nThe new password must contain at least 1 special character.";
                    newPasswordField.setBackground(new Color(255, 94, 116, 131));
                }

                if(!Arrays.equals(confirmNewPasswordField.getPassword(), newPasswordField.getPassword()))
                {
                    errorMessages = errorMessages + "\nThe confirm new password field must match the new password field.";
                    confirmNewPasswordField.setBackground(new Color(255, 94, 116, 131));
                }

                if(!errorMessages.isEmpty())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "Please correct the following errors in the form to proceed -" + errorMessages,
                            "Invalid input", JOptionPane.ERROR_MESSAGE);
                    stopConfirmButtonLoadingAnimation();
                    return null;
                }

                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopConfirmButtonLoadingAnimation();
                    return null;
                }
                if(!NetworkManager.isLoggedIn())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "User is currently not logged in with the server.\nPlease try again a little later.",
                            "User not logged in", JOptionPane.ERROR_MESSAGE);
                    stopConfirmButtonLoadingAnimation();
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    stopConfirmButtonLoadingAnimation();
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean changeSuccess = NetworkManager.changePassword(oldPassword, newPassword);
                NetworkManager.setBusy(false);
                if(changeSuccess == null)
                {
                    JOptionPane.showMessageDialog(getSelfReference(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    stopConfirmButtonLoadingAnimation();
                    return null;
                }
                if(!changeSuccess)
                {
                    oldPasswordField.setBackground(new Color(255, 94, 116, 131));
                    JOptionPane.showMessageDialog(getSelfReference(), "The old password given is wrong.",
                            "Wrong password", JOptionPane.ERROR_MESSAGE);
                    stopConfirmButtonLoadingAnimation();
                    return null;
                }

                JOptionPane.showMessageDialog(getSelfReference(), "Your password has been successfully changed.",
                        "Change successful", JOptionPane.INFORMATION_MESSAGE);
                dispose();

                return null;
            }
        };
        passwordChanger.execute();
    }

    private void startConfirmButtonLoadingAnimation()
    {
        ImageIcon confirmButtonIcon = new ImageIcon(Objects.requireNonNull(ChangePasswordDialog.class.getClassLoader().getResource("Spinner-1s-20px (1).gif")));
        confirmChangeButton.setIcon(confirmButtonIcon);
        confirmButtonIcon.setImageObserver(confirmChangeButton);
        confirmChangeButton.setEnabled(false);
        cancelButton.setEnabled(false);
        oldPasswordField.setEnabled(false);
        showOldPasswordButton.setEnabled(false);
        newPasswordField.setEnabled(false);
        showNewPasswordButton.setEnabled(false);
        confirmNewPasswordField.setEnabled(false);
        showConfirmNewPasswordButton.setEnabled(false);
    }

    private void stopConfirmButtonLoadingAnimation()
    {
        confirmChangeButton.setIcon(null);
        confirmChangeButton.setEnabled(true);
        cancelButton.setEnabled(true);
        oldPasswordField.setEnabled(true);
        showOldPasswordButton.setEnabled(true);
        newPasswordField.setEnabled(true);
        showNewPasswordButton.setEnabled(true);
        confirmNewPasswordField.setEnabled(true);
        showConfirmNewPasswordButton.setEnabled(true);
    }

    private void showOldPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(showOldPasswordButton.isSelected())
        {
            oldPasswordField.setEchoChar((char)0);
        }
        else
        {
            oldPasswordField.setEchoChar('•');
        }
    }

    private void oldPasswordFieldActionPerformed() {
        // TODO add your handling code here:
        oldPasswordField.setBackground((new JPasswordField()).getBackground());
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ChangePasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ChangePasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ChangePasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ChangePasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                ChangePasswordDialog dialog = new ChangePasswordDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel changePasswordLabel;
    private javax.swing.JButton confirmChangeButton;
    private javax.swing.JPasswordField confirmNewPasswordField;
    private javax.swing.JLabel confirmNewPasswordLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField oldPasswordField;
    private javax.swing.JLabel oldPasswordLabel;
    private javax.swing.JToggleButton showConfirmNewPasswordButton;
    private javax.swing.JToggleButton showNewPasswordButton;
    private javax.swing.JToggleButton showOldPasswordButton;
    // End of variables declaration
}
