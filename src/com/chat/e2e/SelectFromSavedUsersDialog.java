/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 *
 * @author Soubhik
 */
public class SelectFromSavedUsersDialog extends javax.swing.JDialog {

    final public static int SINGLE_SELECTION_MODE = 0;
    final public static int MULTI_SELECTION_MODE = 1;

    private String[][] savedUsersList;
    int selectionMode;
    private ArrayList<AbstractButton> tableButtonsList = new ArrayList<>();
    private NewChatCreateDialog parentDialog;
    /**
     * Creates new form SelectFromSavedUsersDialog
     */
    public SelectFromSavedUsersDialog(java.awt.Dialog parent, boolean modal, String[][] savedUsers, int selectionMode) {
        super(parent, modal);
        savedUsersList = savedUsers;
        this.selectionMode = selectionMode;
        parentDialog = (NewChatCreateDialog)parent;
        initComponents();

        setTitle("Saved users");
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        tableScrollPanel = new javax.swing.JScrollPane();
        cancelButton = new javax.swing.JButton();
        confirmSelectionButton = new javax.swing.JButton();
        tableButtonGroup = new ButtonGroup();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tableScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        tableScrollPanel.getVerticalScrollBar().setUnitIncrement(10);

        JPanel outsideContainer = new JPanel(new BorderLayout(1, 1));
        JPanel insideContainer = new JPanel(new GridBagLayout());

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.NONE;
        constraints.weightx = 0;

        JLabel emptyHeader = new JLabel("");
        insideContainer.add(emptyHeader, constraints);

        constraints.weightx = 1;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.gridwidth = GridBagConstraints.RELATIVE;

        JLabel nameHeader = new JLabel("Name");
        nameHeader.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
        nameHeader.setHorizontalAlignment(JLabel.CENTER);
        insideContainer.add(nameHeader, constraints);

        constraints.gridwidth = GridBagConstraints.REMAINDER;

        JLabel accIdHeader = new JLabel("Account ID");
        accIdHeader.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
        accIdHeader.setHorizontalAlignment(JLabel.CENTER);
        insideContainer.add(accIdHeader, constraints);

        for(int i = 0; i < savedUsersList.length; i++)
        {
            GridBagConstraints layoutConstraints = new GridBagConstraints();
            layoutConstraints.fill = GridBagConstraints.NONE;
            layoutConstraints.weightx = 0;

            AbstractButton selectButton;
            if(selectionMode == SINGLE_SELECTION_MODE)
            {
                selectButton = new JRadioButton();
                tableButtonGroup.add(selectButton);
            }
            else
            {
                selectButton = new JCheckBox();
            }
            //selectButton.setFocusPainted(false);
            selectButton.setBorderPainted(true);
            selectButton.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));
            insideContainer.add(selectButton, layoutConstraints);
            tableButtonsList.add(selectButton);

            layoutConstraints.weightx = 1;
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridwidth = GridBagConstraints.RELATIVE;

            JLabel nameField = new JLabel(savedUsersList[i][0]);
            nameField.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));
            nameField.setHorizontalAlignment(JLabel.LEFT);
            insideContainer.add(nameField, layoutConstraints);

            layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;

            JLabel accIdField = new JLabel(savedUsersList[i][1]);
            accIdField.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));
            accIdField.setHorizontalAlignment(JLabel.CENTER);
            insideContainer.add(accIdField, layoutConstraints);
        }

        outsideContainer.add(insideContainer, BorderLayout.NORTH);
        tableScrollPanel.getViewport().setView(outsideContainer);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cancelButtonClicked();
            }
        });

        confirmSelectionButton.setText("Select");
        confirmSelectionButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectButtonClicked();
            }
        });

//        Object[][] tableData = new Object[savedUsersList.length][3];
//        for(int i = 0; i < tableData.length; i++)
//        {
//            if(selectionMode == SINGLE_SELECTION_MODE)
//                tableData[i][0] = new JRadioButton();
//            else if(selectionMode == MULTI_SELECTION_MODE)
//                tableData[i][0] = new JCheckBox();
//            tableData[i][1] = savedUsersList[i][0];
//            tableData[i][2] = savedUsersList[i][1];
//        }
//        savedUsersTable.setModel(new DefaultTableModel(tableData, new String[]{"", "Name", "Account ID"}));

//        savedUsersTable.setModel(new javax.swing.table.DefaultTableModel(
//                tableData,
//                new String [] {
//                        "", "Name", "Account ID"
//                }
//        ) {
//            Class[] types = new Class [] {
//                    javax.swing.JRadioButton.class, java.lang.String.class, java.lang.String.class
//            };
//            boolean[] canEdit = new boolean [] {
//                    true, false, false
//            };
//
//            public Class getColumnClass(int columnIndex) {
//                return types [columnIndex];
//            }
//
//            public boolean isCellEditable(int rowIndex, int columnIndex) {
//                return canEdit [columnIndex];
//            }
//        });
//        savedUsersTable.setShowGrid(true);
//        savedUsersTable.setShowHorizontalLines(true);
//        savedUsersTable.setShowVerticalLines(true);


        //tableScrollPanel.setViewportView(savedUsersTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tableScrollPanel)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(confirmSelectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(tableScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(confirmSelectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SelectFromSavedUsersDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SelectFromSavedUsersDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SelectFromSavedUsersDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SelectFromSavedUsersDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                SelectFromSavedUsersDialog dialog = new SelectFromSavedUsersDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }


    private void cancelButtonClicked()
    {
        dispose();
    }

    private void selectButtonClicked()
    {
        if(selectionMode == SINGLE_SELECTION_MODE)
        {
            String selectedAccountID = null;
            for(int i = 0; i < tableButtonsList.size(); i++)
            {
                if(((JRadioButton)(tableButtonsList.get(i))).isSelected())
                {
                    selectedAccountID = savedUsersList[i][1];
                    break;
                }
            }
            if(selectedAccountID == null)
            {
                JOptionPane.showMessageDialog(this, "Please select one user to continue.", "No user selected", JOptionPane.ERROR_MESSAGE);
                return;
            }
            parentDialog.setAccountIdFieldText(selectedAccountID);
            dispose();
        }
        else if(selectionMode == MULTI_SELECTION_MODE)
        {
            String selectedAccountIDs = "";
            for(int i = 0; i < tableButtonsList.size(); i++)
            {
                if(((JCheckBox)(tableButtonsList.get(i))).isSelected())
                {
                    selectedAccountIDs = selectedAccountIDs + savedUsersList[i][1] + ",";
                }
            }
            if(selectedAccountIDs.isEmpty())
            {
                JOptionPane.showMessageDialog(this, "Please select at least one user to continue.", "No user selected", JOptionPane.ERROR_MESSAGE);
                return;
            }
            selectedAccountIDs = selectedAccountIDs.substring(0, selectedAccountIDs.length() - 1);
            parentDialog.setAccountIdFieldText(selectedAccountIDs);
            dispose();
        }
    }

    private ButtonGroup tableButtonGroup;

    // Variables declaration - do not modify
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmSelectionButton;
    private javax.swing.JScrollPane tableScrollPanel;
    // End of variables declaration
}
