/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.chat.e2e;

import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.Arrays;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Soubhik
 */
public class UserRegisterPanel extends javax.swing.JPanel {
    /**
     * Creates new form userRegisterPanel
     */
    public UserRegisterPanel() {
        initComponents();
        securityAns1Field.setEnabled(false);
        securityAns2Field.setEnabled(false);
        securityAns3Field.setEnabled(false);
//        ImageIcon registerButtonIcon = new ImageIcon("D:\\download\\Spinner-1s-30px (2).gif");
//        registerButton.setIcon(registerButtonIcon);
//        registerButtonIcon.setImageObserver(registerButton);
//        registerButton.setEnabled(false);

        //usernameField.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        registerLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        securityQs1ChooseBox = new javax.swing.JComboBox<>();
        securityAns2Field = new javax.swing.JTextField();
        securityQs2ChooseBox = new javax.swing.JComboBox<>();
        securityQs3ChooseBox = new javax.swing.JComboBox<>();
        securityAns1Field = new javax.swing.JTextField();
        displayNameLabel = new javax.swing.JLabel();
        displayNameField = new javax.swing.JTextField();
        securityAns3Field = new javax.swing.JTextField();
        securityQs1Label = new javax.swing.JLabel();
        securityQs2Label = new javax.swing.JLabel();
        securityQs3Label = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordField = new javax.swing.JPasswordField();
        passwordField = new javax.swing.JPasswordField();
        passwordShowButton = new javax.swing.JToggleButton();
        confirmPasswordShowButton = new javax.swing.JToggleButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        setPreferredSize(new java.awt.Dimension(680, 477));

        registerLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        registerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        registerLabel.setText("Register New User");

        usernameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        usernameLabel.setText("Username");

        usernameField.setToolTipText("Username must be unique and not taken by another account");
        usernameField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                usernameFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                usernameFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                usernameFieldActionPerformed();
            }
        });

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passwordLabel.setText("Password");

        securityQs1ChooseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----------", "What was the name of your first childhood friend?", "What is the name of your first pet?", "What color do you like the most?", "What year was your grandmother born?", "What is your favorite sport?", "What was the first exam you failed?", "What was the name of the first school you remember attending?" }));
        securityQs1ChooseBox.setToolTipText("Select a question\nThis field is required");
        securityQs1ChooseBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityQs1ChooseBoxActionPerformed(evt);
            }
        });

        securityAns2Field.setToolTipText("Answer of selected question (case-insensitive)");
        securityAns2Field.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                securityAns2FieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                securityAns2FieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                securityAns2FieldActionPerformed();
            }
        });

        securityQs2ChooseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----------", "What was the name of your first childhood friend?", "What is the name of your first pet?", "What color do you like the most?", "What year was your grandmother born?", "What is your favorite sport?", "What was the first exam you failed?", "What was the name of the first school you remember attending?" }));
        securityQs2ChooseBox.setToolTipText("Select a question\nThis field is optional");
        securityQs2ChooseBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityQs2ChooseBoxActionPerformed(evt);
            }
        });

        securityQs3ChooseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----------", "What was the name of your first childhood friend?", "What is the name of your first pet?", "What color do you like the most?", "What year was your grandmother born?", "What is your favorite sport?", "What was the first exam you failed?", "What was the name of the first school you remember attending?" }));
        securityQs3ChooseBox.setToolTipText("Select a question\nThis field is optional");
        securityQs3ChooseBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityQs3ChooseBoxActionPerformed(evt);
            }
        });

        securityAns1Field.setToolTipText("Answer of selected question (case-insensitive)");
        securityAns1Field.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                securityAns1FieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                securityAns1FieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                securityAns1FieldActionPerformed();
            }
        });

        displayNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        displayNameLabel.setText("Display Name");

        displayNameField.setToolTipText("The name which will be seen by other users");
        displayNameField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                displayNameFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                displayNameFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                displayNameFieldActionPerformed();
            }
        });

        securityAns3Field.setToolTipText("Answer of selected question (case-insensitive)");
        securityAns3Field.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                securityAns3FieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                securityAns3FieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                securityAns3FieldActionPerformed();
            }
        });

        securityQs1Label.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        securityQs1Label.setText("Security Question 1");

        securityQs2Label.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        securityQs2Label.setText("Security Question 2");

        securityQs3Label.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        securityQs3Label.setText("Security Question 3");

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        registerButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        confirmPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password");

        confirmPasswordField.setToolTipText("Password must be same as above");
        confirmPasswordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                confirmPasswordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                confirmPasswordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                confirmPasswordFieldActionPerformed();
            }
        });

        passwordField.setToolTipText("The password must contain the following:\n-> length between 8-32 characters\n-> at least 1 capital letter\n-> at least 1 small letter\n-> at least 1 number\n-> at least 1 special character");
        passwordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                passwordFieldActionPerformed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                passwordFieldActionPerformed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                passwordFieldActionPerformed();
            }
        });

        passwordShowButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(UserRegisterPanel.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        passwordShowButton.setToolTipText("Show/Hide password");
        passwordShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordShowButtonActionPerformed(evt);
            }
        });
        passwordShowButton.setFocusable(false);

        confirmPasswordShowButton.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(UserRegisterPanel.class.getClassLoader().getResource("eye (1).png")))); // NOI18N
        confirmPasswordShowButton.setToolTipText("Show/Hide password");
        confirmPasswordShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPasswordShowButtonActionPerformed(evt);
            }
        });
        confirmPasswordShowButton.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(registerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(displayNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(displayNameField))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(securityQs3Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(securityQs2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(securityQs1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(securityQs2ChooseBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 288, Short.MAX_VALUE)
                                                        .addComponent(securityQs1ChooseBox, 0, 1, Short.MAX_VALUE)
                                                        .addComponent(securityQs3ChooseBox, 0, 1, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(securityAns1Field)
                                                        .addComponent(securityAns2Field)
                                                        .addComponent(securityAns3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(confirmPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(usernameField)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(passwordField)
                                                                        .addComponent(confirmPasswordField))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(passwordShowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(confirmPasswordShowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(registerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(registerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordShowButton))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(confirmPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(confirmPasswordShowButton))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(displayNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(securityQs1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(securityQs1ChooseBox)
                                        .addComponent(securityAns1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(securityQs2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(securityQs2ChooseBox)
                                        .addComponent(securityAns2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(securityQs3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(securityQs3ChooseBox)
                                        .addComponent(securityAns3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61))
        );
    }// </editor-fold>

    private void usernameFieldActionPerformed() {
        // TODO add your handling code here:
        usernameField.setBackground((new JTextField()).getBackground());
    }

    private void securityAns1FieldActionPerformed() {
        // TODO add your handling code here:
        securityAns1Field.setBackground((new JTextField()).getBackground());
    }


    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        registerButtonStartLoadingAnimation();
        usernameField.setBackground((new JTextField()).getBackground());
        passwordField.setBackground((new JPasswordField()).getBackground());
        confirmPasswordField.setBackground((new JPasswordField()).getBackground());
        displayNameField.setBackground((new JTextField()).getBackground());
        securityAns1Field.setBackground((new JTextField()).getBackground());
        securityAns2Field.setBackground((new JTextField()).getBackground());
        securityAns3Field.setBackground((new JTextField()).getBackground());
        securityQs1ChooseBox.setBackground((new JComboBox<>()).getBackground());

        SwingWorker<Void, Void> registerWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                String errorMessages = "";
                String password = new String(passwordField.getPassword());
                if(password.length() < 8 || password.length() > 32)
                {
                    errorMessages = errorMessages + "\nThe password length must be within 8-32 characters.";
                    passwordField.setBackground(new Color(255, 94, 116, 131));
                }
                Pattern capitalLetters = Pattern.compile("[A-Z]");
                Pattern smallLetters = Pattern.compile("[a-z]");
                Pattern numbers = Pattern.compile("[0-9]");
                Pattern specialCharacters = Pattern.compile("[!@#$%&*()_+=|<>?{}\\[\\]~-]");
                Matcher hasCapitalLetter = capitalLetters.matcher(password);
                Matcher hasSmallLetter = smallLetters.matcher(password);
                Matcher hasNumber = numbers.matcher(password);
                Matcher hasSpecialCharacter = specialCharacters.matcher(password);
                if(!hasCapitalLetter.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 capital letter.";
                    passwordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasSmallLetter.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 small letter.";
                    passwordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasNumber.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 number.";
                    passwordField.setBackground(new Color(255, 94, 116, 131));
                }
                if(!hasSpecialCharacter.find())
                {
                    errorMessages = errorMessages + "\nThe password must contain at least 1 special character.";
                    passwordField.setBackground(new Color(255, 94, 116, 131));
                }

                if(!Arrays.equals(confirmPasswordField.getPassword(), passwordField.getPassword()))
                {
                    errorMessages = errorMessages + "\nThe confirm password field must match the password field.";
                    confirmPasswordField.setBackground(new Color(255, 94, 116, 131));
                }

                if(displayNameField.getText().isEmpty())
                {
                    errorMessages = errorMessages + "\nDisplay name field must not be empty.";
                    displayNameField.setBackground(new Color(255, 94, 116, 131));
                }

                if(securityAns1Field.isEnabled() && securityAns1Field.getText().isEmpty())
                {
                    errorMessages = errorMessages + "\nAnswer for security question 1 must not be empty.";
                    securityAns1Field.setBackground(new Color(255, 94, 116, 131));
                }
                if(securityAns2Field.isEnabled() && securityAns2Field.getText().isEmpty())
                {
                    errorMessages = errorMessages + "\nAnswer for security question 2 must not be empty.";
                    securityAns2Field.setBackground(new Color(255, 94, 116, 131));
                }
                if(securityAns3Field.isEnabled() && securityAns3Field.getText().isEmpty())
                {
                    errorMessages = errorMessages + "\nAnswer for security question 3 must not be empty.";
                    securityAns3Field.setBackground(new Color(255, 94, 116, 131));
                }

                if(securityQs1ChooseBox.getSelectedItem().equals("----------") && securityQs2ChooseBox.getSelectedItem().equals("----------") && securityQs3ChooseBox.getSelectedItem().equals("----------"))
                {
                    errorMessages = errorMessages + "\nAt least 1 security question must be answered.";
                    securityQs1ChooseBox.setBackground(new Color(255, 94, 116, 131));
                }

                if(!errorMessages.isEmpty())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "Please correct the following errors in the register form -" + errorMessages,
                            "Invalid input", JOptionPane.ERROR_MESSAGE);
                    registerButtonStopLoadingAnimation();
                    return null;
                }

                if(usernameField.getText().isEmpty())
                {
                    usernameField.setBackground(new Color(255, 94, 116, 131));
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "Username cannot be empty.\nPlease enter a proper username.",
                            "Invalid username", JOptionPane.ERROR_MESSAGE);
                    registerButtonStopLoadingAnimation();
                    return null;
                }

                if(!NetworkManager.isConnected())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    //System.out.println("Network is not connected.");
                    registerButtonStopLoadingAnimation();
                    return null;
                }
                if(NetworkManager.isBusy())
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently busy.\nPlease try again later.",
                            "Server busy", JOptionPane.ERROR_MESSAGE);
                    registerButtonStopLoadingAnimation();
                    return null;
                }

                NetworkManager.setBusy(true);
                Boolean usernameAvailable = NetworkManager.checkUsernameAvailability(new String(usernameField.getText()));
                //NetworkManager.setBusy(false);
                if(usernameAvailable == null)
                {
                    NetworkManager.setBusy(false);
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    //System.out.println("Username check returned null.");
                    registerButtonStopLoadingAnimation();
                    return null;
                }
                if(!usernameAvailable)
                {
                    NetworkManager.setBusy(false);
                    usernameField.setBackground(new Color(255, 94, 116, 131));
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The chosen username is already taken.\n Please try another one.",
                            "Username taken", JOptionPane.ERROR_MESSAGE);
                    registerButtonStopLoadingAnimation();
                    return null;
                }
                Boolean registerSuccess = NetworkManager.registerNewUser(new String(usernameField.getText()),
                        new String(passwordField.getPassword()), new String(displayNameField.getText()),
                        securityQs1ChooseBox.getSelectedItem().equals("----------")? null:securityQs1ChooseBox.getSelectedItem().toString(),
                        securityQs1ChooseBox.getSelectedItem().equals("----------")? null:new String(securityAns1Field.getText()),
                        securityQs2ChooseBox.getSelectedItem().equals("----------")? null:securityQs2ChooseBox.getSelectedItem().toString(),
                        securityQs2ChooseBox.getSelectedItem().equals("----------")? null:new String(securityAns2Field.getText()),
                        securityQs3ChooseBox.getSelectedItem().equals("----------")? null:securityQs3ChooseBox.getSelectedItem().toString(),
                        securityQs3ChooseBox.getSelectedItem().equals("----------")? null:new String(securityAns3Field.getText()));
                NetworkManager.setBusy(false);
                if(registerSuccess == null)
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "The server is currently unavailable.\nPlease check your connection or try again later.",
                            "Server unavailable", JOptionPane.ERROR_MESSAGE);
                    registerButtonStopLoadingAnimation();
                    return null;
                }
                if(!registerSuccess)
                {
                    JOptionPane.showMessageDialog(Main.getMainFrame(), "Registration failed due to server internal error.\nPlease try again later.",
                            "Registration failed", JOptionPane.ERROR_MESSAGE);
                    registerButtonStopLoadingAnimation();
                    return null;
                }
                JOptionPane.showMessageDialog(Main.getMainFrame(), "User has been successfully registered.\nPlease select existing user and login.",
                        "Registration successful", JOptionPane.INFORMATION_MESSAGE);
                WindowManager.changeFromRegisterToSelection();
                return null;
            }
        };
        registerWorker.execute();

    }

    private void registerButtonStartLoadingAnimation()
    {
        ImageIcon registerButtonIcon = new ImageIcon(Objects.requireNonNull(UserRegisterPanel.class.getClassLoader().getResource("Spinner-1s-30px (2).gif")));
        registerButton.setIcon(registerButtonIcon);
        registerButtonIcon.setImageObserver(registerButton);
        registerButton.setEnabled(false);
        usernameField.setFocusable(false);
        passwordField.setFocusable(false);
        passwordShowButton.setEnabled(false);
        confirmPasswordField.setFocusable(false);
        confirmPasswordShowButton.setEnabled(false);
        displayNameField.setFocusable(false);
        securityQs1ChooseBox.setEnabled(false);
        securityAns1Field.setFocusable(false);
        securityQs2ChooseBox.setEnabled(false);
        securityAns2Field.setFocusable(false);
        securityQs3ChooseBox.setEnabled(false);
        securityAns3Field.setFocusable(false);
        cancelButton.setEnabled(false);
        repaint();
        revalidate();
    }

    private void registerButtonStopLoadingAnimation()
    {
        registerButton.setIcon(null);
        registerButton.setEnabled(true);
        usernameField.setFocusable(true);
        passwordField.setFocusable(true);
        passwordShowButton.setEnabled(true);
        confirmPasswordField.setFocusable(true);
        confirmPasswordShowButton.setEnabled(true);
        displayNameField.setFocusable(true);
        securityQs1ChooseBox.setEnabled(true);
        securityQs2ChooseBox.setEnabled(true);
        securityQs3ChooseBox.setEnabled(true);
        securityAns1Field.setFocusable(true);
        securityAns2Field.setFocusable(true);
        securityAns3Field.setFocusable(true);
        cancelButton.setEnabled(true);
        repaint();
        revalidate();
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        WindowManager.changeFromRegisterToSelection();
    }

    private void passwordFieldActionPerformed() {
        // TODO add your handling code here:
        passwordField.setBackground((new JPasswordField()).getBackground());
    }

    private void confirmPasswordFieldActionPerformed() {
        // TODO add your handling code here:
        confirmPasswordField.setBackground((new JPasswordField()).getBackground());
    }

    private void passwordShowButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(passwordShowButton.isSelected())
        {
            passwordField.setEchoChar((char)0);
        }
        else
        {
            passwordField.setEchoChar('•');
        }
    }

    private void confirmPasswordShowButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(confirmPasswordShowButton.isSelected())
        {
            confirmPasswordField.setEchoChar((char)0);
        }
        else
        {
            confirmPasswordField.setEchoChar('•');
        }
    }

    private void displayNameFieldActionPerformed() {
        // TODO add your handling code here:
        displayNameField.setBackground((new JTextField()).getBackground());
    }

    private void securityQs1ChooseBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        securityQs1ChooseBox.setBackground((new JComboBox<>()).getBackground());
        if(securityQs1ChooseBox.getSelectedItem().equals("----------"))
        {
            securityAns1Field.setEnabled(false);
        }
        else
        {
            securityAns1Field.setEnabled(true);
        }
    }

    private void securityQs2ChooseBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(securityQs2ChooseBox.getSelectedItem().equals("----------"))
        {
            securityAns2Field.setEnabled(false);
        }
        else
        {
            securityAns2Field.setEnabled(true);
        }
    }


    private void securityQs3ChooseBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(securityQs3ChooseBox.getSelectedItem().equals("----------"))
        {
            securityAns3Field.setEnabled(false);
        }
        else
        {
            securityAns3Field.setEnabled(true);
        }
    }

    private void securityAns2FieldActionPerformed() {
        // TODO add your handling code here:
        securityAns2Field.setBackground((new JTextField()).getBackground());
    }

    private void securityAns3FieldActionPerformed() {
        // TODO add your handling code here:
        securityAns3Field.setBackground((new JTextField()).getBackground());
    }

    public void makeUsernameFieldGrabFocus()
    {
        usernameField.grabFocus();
    }

    // Variables declaration - do not modify
    private javax.swing.JButton cancelButton;
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JToggleButton confirmPasswordShowButton;
    private javax.swing.JTextField displayNameField;
    private javax.swing.JLabel displayNameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JToggleButton passwordShowButton;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel registerLabel;
    private javax.swing.JTextField securityAns1Field;
    private javax.swing.JTextField securityAns2Field;
    private javax.swing.JTextField securityAns3Field;
    private javax.swing.JComboBox<String> securityQs1ChooseBox;
    private javax.swing.JLabel securityQs1Label;
    private javax.swing.JComboBox<String> securityQs2ChooseBox;
    private javax.swing.JLabel securityQs2Label;
    private javax.swing.JComboBox<String> securityQs3ChooseBox;
    private javax.swing.JLabel securityQs3Label;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration
}
